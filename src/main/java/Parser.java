
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

import java_cup.runtime.*;
import java.util.*;
import java.io.*;
import Conditions.*;
import Expresions.*;
import Instuctions.*;
import Operators.*;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return Symbols.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\052\000\002\002\004\000\002\004\003\000\002\004" +
    "\003\000\002\004\003\000\002\004\003\000\002\004\003" +
    "\000\002\002\003\000\002\002\004\000\002\002\004\000" +
    "\002\002\003\000\002\002\005\000\002\002\005\000\002" +
    "\005\003\000\002\005\003\000\002\005\003\000\002\005" +
    "\003\000\002\005\003\000\002\005\003\000\002\003\003" +
    "\000\002\003\003\000\002\003\005\000\002\003\004\000" +
    "\002\003\005\000\002\003\005\000\002\003\005\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\005\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\007\005\000\002\007\004\000\002\010\005\000" +
    "\002\011\006\000\002\011\010\000\002\012\006\000\002" +
    "\012\006\000\002\014\004\000\002\013\004\000\002\015" +
    "\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\022\011\021\013\006\014\014\017\005\020" +
    "\022\021\016\022\004\043\007\001\002\000\004\043\115" +
    "\001\002\000\022\006\036\007\033\010\035\033\034\034" +
    "\030\040\040\042\027\043\031\001\002\000\010\016\uffe2" +
    "\017\uffe2\032\uffe2\001\002\000\004\023\110\001\002\000" +
    "\010\016\uffe4\017\uffe4\032\uffe4\001\002\000\010\016\uffe7" +
    "\017\uffe7\032\uffe7\001\002\000\004\002\107\001\002\000" +
    "\010\016\uffe8\017\uffe8\032\uffe8\001\002\000\022\006\036" +
    "\007\033\010\035\033\034\034\030\040\040\042\027\043" +
    "\031\001\002\000\010\016\uffe6\017\uffe6\032\uffe6\001\002" +
    "\000\014\033\034\034\030\040\062\042\027\043\031\001" +
    "\002\000\010\016\uffe3\017\uffe3\032\uffe3\001\002\000\024" +
    "\002\uffd8\011\021\013\006\014\014\017\005\020\022\021" +
    "\016\022\004\043\007\001\002\000\022\011\021\013\006" +
    "\014\014\017\005\020\022\021\016\022\004\043\007\001" +
    "\002\000\022\011\021\013\006\014\014\017\005\020\022" +
    "\021\016\022\004\043\007\001\002\000\004\032\024\001" +
    "\002\000\026\002\uffe0\011\uffe0\012\uffe0\013\uffe0\014\uffe0" +
    "\017\uffe0\020\uffe0\021\uffe0\022\uffe0\043\uffe0\001\002\000" +
    "\004\017\026\001\002\000\022\006\036\007\033\010\035" +
    "\033\034\034\030\040\040\042\027\043\031\001\002\000" +
    "\050\004\ufffb\005\ufffb\015\ufffb\016\ufffb\017\ufffb\020\ufffb" +
    "\024\ufffb\025\ufffb\026\ufffb\027\ufffb\030\ufffb\031\ufffb\032" +
    "\ufffb\033\ufffb\034\ufffb\035\ufffb\036\ufffb\037\ufffb\041\ufffb" +
    "\001\002\000\004\042\074\001\002\000\050\004\ufff8\005" +
    "\ufff8\015\ufff8\016\ufff8\017\ufff8\020\ufff8\024\ufff8\025\ufff8" +
    "\026\ufff8\027\ufff8\030\ufff8\031\ufff8\032\ufff8\033\ufff8\034" +
    "\ufff8\035\ufff8\036\ufff8\037\ufff8\041\ufff8\001\002\000\014" +
    "\004\066\005\067\016\uffdb\017\uffdb\032\uffdb\001\002\000" +
    "\022\004\uffef\005\uffef\015\uffef\016\uffef\017\uffef\020\uffef" +
    "\032\uffef\041\uffef\001\002\000\004\042\073\001\002\000" +
    "\022\004\uffee\005\uffee\015\uffee\016\uffee\017\uffee\020\uffee" +
    "\032\uffee\041\uffee\001\002\000\022\006\036\007\033\010" +
    "\035\033\034\034\030\040\040\042\027\043\031\001\002" +
    "\000\030\024\051\025\060\026\053\027\054\030\046\031" +
    "\057\033\052\034\043\035\056\036\044\037\050\001\002" +
    "\000\022\006\036\007\033\010\035\033\034\034\030\040" +
    "\040\042\027\043\031\001\002\000\010\004\066\005\067" +
    "\041\065\001\002\000\032\024\051\025\060\026\053\027" +
    "\054\030\046\031\057\033\052\034\043\035\056\036\044" +
    "\037\050\041\055\001\002\000\014\033\uffff\034\uffff\040" +
    "\uffff\042\uffff\043\uffff\001\002\000\014\033\ufffd\034\ufffd" +
    "\040\ufffd\042\ufffd\043\ufffd\001\002\000\014\033\034\034" +
    "\030\040\062\042\027\043\031\001\002\000\014\033\ufff1" +
    "\034\ufff1\040\ufff1\042\ufff1\043\ufff1\001\002\000\014\033" +
    "\034\034\030\040\062\042\027\043\031\001\002\000\014" +
    "\033\ufffc\034\ufffc\040\ufffc\042\ufffc\043\ufffc\001\002\000" +
    "\014\033\ufff5\034\ufff5\040\ufff5\042\ufff5\043\ufff5\001\002" +
    "\000\014\033\000\034\000\040\000\042\000\043\000\001" +
    "\002\000\014\033\ufff3\034\ufff3\040\ufff3\042\ufff3\043\ufff3" +
    "\001\002\000\014\033\ufff2\034\ufff2\040\ufff2\042\ufff2\043" +
    "\ufff2\001\002\000\050\004\ufff6\005\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\020\ufff6\024\ufff6\025\ufff6\026\ufff6\027\ufff6\030" +
    "\ufff6\031\ufff6\032\ufff6\033\ufff6\034\ufff6\035\ufff6\036\ufff6" +
    "\037\ufff6\041\ufff6\001\002\000\014\033\ufffe\034\ufffe\040" +
    "\ufffe\042\ufffe\043\ufffe\001\002\000\014\033\ufff0\034\ufff0" +
    "\040\ufff0\042\ufff0\043\ufff0\001\002\000\014\033\ufff4\034" +
    "\ufff4\040\ufff4\042\ufff4\043\ufff4\001\002\000\034\004\uffe9" +
    "\005\uffe9\015\uffe9\016\uffe9\017\uffe9\020\uffe9\032\uffe9\033" +
    "\052\034\043\035\056\036\044\037\050\041\uffe9\001\002" +
    "\000\014\033\034\034\030\040\062\042\027\043\031\001" +
    "\002\000\016\033\052\034\043\035\056\036\044\037\050" +
    "\041\055\001\002\000\050\004\ufff7\005\ufff7\015\ufff7\016" +
    "\ufff7\017\ufff7\020\ufff7\024\ufff7\025\ufff7\026\ufff7\027\ufff7" +
    "\030\ufff7\031\ufff7\032\ufff7\033\052\034\043\035\056\036" +
    "\044\037\050\041\ufff7\001\002\000\022\004\uffed\005\uffed" +
    "\015\uffed\016\uffed\017\uffed\020\uffed\032\uffed\041\uffed\001" +
    "\002\000\022\006\036\007\033\010\035\033\034\034\030" +
    "\040\040\042\027\043\031\001\002\000\022\006\036\007" +
    "\033\010\035\033\034\034\030\040\040\042\027\043\031" +
    "\001\002\000\022\004\uffea\005\uffea\015\uffea\016\uffea\017" +
    "\uffea\020\uffea\032\uffea\041\uffea\001\002\000\022\004\uffeb" +
    "\005\uffeb\015\uffeb\016\uffeb\017\uffeb\020\uffeb\032\uffeb\041" +
    "\uffeb\001\002\000\022\004\uffec\005\uffec\015\uffec\016\uffec" +
    "\017\uffec\020\uffec\032\uffec\041\uffec\001\002\000\050\004" +
    "\ufff9\005\ufff9\015\ufff9\016\ufff9\017\ufff9\020\ufff9\024\ufff9" +
    "\025\ufff9\026\ufff9\027\ufff9\030\ufff9\031\ufff9\032\ufff9\033" +
    "\ufff9\034\ufff9\035\ufff9\036\ufff9\037\ufff9\041\ufff9\001\002" +
    "\000\050\004\ufffa\005\ufffa\015\ufffa\016\ufffa\017\ufffa\020" +
    "\ufffa\024\ufffa\025\ufffa\026\ufffa\027\ufffa\030\ufffa\031\ufffa" +
    "\032\ufffa\033\ufffa\034\ufffa\035\ufffa\036\ufffa\037\ufffa\041" +
    "\ufffa\001\002\000\024\011\021\012\076\013\006\014\014" +
    "\017\005\020\022\021\016\022\004\043\007\001\002\000" +
    "\010\016\uffe5\017\uffe5\032\uffe5\001\002\000\004\032\100" +
    "\001\002\000\026\002\uffe1\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\017\uffe1\020\uffe1\021\uffe1\022\uffe1\043\uffe1\001\002" +
    "\000\022\016\uffda\017\uffda\032\uffda\033\052\034\043\035" +
    "\056\036\044\037\050\001\002\000\010\004\066\005\067" +
    "\015\103\001\002\000\022\011\021\013\006\014\014\017" +
    "\005\020\022\021\016\022\004\043\007\001\002\000\010" +
    "\016\105\017\uffde\032\uffde\001\002\000\022\011\021\013" +
    "\006\014\014\017\005\020\022\021\016\022\004\043\007" +
    "\001\002\000\010\016\uffdd\017\uffdd\032\uffdd\001\002\000" +
    "\004\002\001\001\002\000\014\033\034\034\030\040\062" +
    "\042\027\043\031\001\002\000\022\016\uffdf\017\uffdf\032" +
    "\uffdf\033\052\034\043\035\056\036\044\037\050\001\002" +
    "\000\010\004\066\005\067\020\113\001\002\000\022\011" +
    "\021\013\006\014\014\017\005\020\022\021\016\022\004" +
    "\043\007\001\002\000\010\016\uffdc\017\uffdc\032\uffdc\001" +
    "\002\000\010\016\uffd9\017\uffd9\032\uffd9\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\113\000\022\006\022\007\017\010\012\011\010\012" +
    "\014\013\016\014\007\015\011\001\001\000\002\001\001" +
    "\000\006\002\036\003\111\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\002\036\003\101\001" +
    "\001\000\002\001\001\000\004\002\100\001\001\000\002" +
    "\001\001\000\016\006\076\010\012\011\010\012\014\013" +
    "\016\014\007\001\001\000\020\006\022\007\074\010\012" +
    "\011\010\012\014\013\016\014\007\001\001\000\016\006" +
    "\024\010\012\011\010\012\014\013\016\014\007\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\036\003\031\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\002\036" +
    "\003\071\001\001\000\006\004\044\005\046\001\001\000" +
    "\006\002\041\003\040\001\001\000\002\001\001\000\006" +
    "\004\044\005\046\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\002\063\001\001\000\002\001\001\000\004" +
    "\002\060\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\004\044\001\001\000\004\002\062\001\001" +
    "\000\004\004\044\001\001\000\004\004\044\001\001\000" +
    "\002\001\001\000\006\002\036\003\070\001\001\000\006" +
    "\002\036\003\067\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\006\076\010\012\011\010\012\014\013\016\014" +
    "\007\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\004\044\001\001\000\002\001\001\000" +
    "\016\006\103\010\012\011\010\012\014\013\016\014\007" +
    "\001\001\000\002\001\001\000\016\006\105\010\012\011" +
    "\010\012\014\013\016\014\007\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\110\001\001\000\004\004" +
    "\044\001\001\000\002\001\001\000\016\006\113\010\012" +
    "\011\010\012\014\013\016\014\007\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    public void report_error(String message, Object info) {
        StringBuilder m = new StringBuilder("Error");
        if (info instanceof java_cup.runtime.Symbol) {
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
            if (s.left >= 0) {
                m.append(" in line "+(s.left+1));
                if (s.right >= 0)
                    m.append(", column "+(s.right+1));
            }
        }
        m.append(" : "+message);
        System.err.println(m);
    }

    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        System.exit(1);
    }


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= program EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Main start_val = (Main)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // num_op ::= PLUS 
            {
              Operator RESULT =null;
		 RESULT = new PlusOperator(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_op",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // num_op ::= MINUS 
            {
              Operator RESULT =null;
		 RESULT = new MinusOperator(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_op",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // num_op ::= TIMES 
            {
              Operator RESULT =null;
		 RESULT = new TimesOperator(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_op",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // num_op ::= DIVIDE 
            {
              Operator RESULT =null;
		 RESULT = new DivideOperator(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_op",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // num_op ::= MODE 
            {
              Operator RESULT =null;
		 RESULT = new ModeOperator(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_op",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // num_expr ::= NUM 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntExpression(e.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // num_expr ::= MINUS NUM 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new UMinusExpression(e.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // num_expr ::= PLUS NUM 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Integer e = (Integer)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IntExpression(e.intValue()); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // num_expr ::= IDENT 
            {
              Expression RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ID(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // num_expr ::= num_expr num_op num_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Operator o = (Operator)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OperatorExpression(e, o, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // num_expr ::= LPAREN num_expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PIntExpression(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_expr",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // num_rel ::= EQ 
            {
              Condition RESULT =null;
		 RESULT = new Condition("JZ"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_rel",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // num_rel ::= LT 
            {
              Condition RESULT =null;
		 RESULT = new Condition("JLZ"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_rel",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // num_rel ::= LE 
            {
              Condition RESULT =null;
		 RESULT = new Condition("JLEZ"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_rel",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // num_rel ::= GT 
            {
              Condition RESULT =null;
		 RESULT = new Condition("JGZ"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_rel",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // num_rel ::= GE 
            {
              Condition RESULT =null;
		 RESULT = new Condition("JGEZ"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_rel",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // num_rel ::= NE 
            {
              Condition RESULT =null;
		 RESULT = new Condition("JNZ"); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("num_rel",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // bool_expr ::= TRUE 
            {
              Expression RESULT =null;
		 RESULT = new BooleanExpression(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // bool_expr ::= FALSE 
            {
              Expression RESULT =null;
		 RESULT = new BooleanExpression(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // bool_expr ::= LPAREN bool_expr RPAREN 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new PBooleanExpression(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // bool_expr ::= NOT bool_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new NegationBooleanExpression(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // bool_expr ::= bool_expr AND bool_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AndBooleanExpression(e, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // bool_expr ::= bool_expr OR bool_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OrBooleanExpression(e, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // bool_expr ::= num_expr num_rel num_expr 
            {
              Expression RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Condition o = (Condition)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int e2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int e2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e2 = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ConditionBooleanExpression(e, o, e2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("bool_expr",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // simple_instr ::= assign_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_instr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // simple_instr ::= if_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_instr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // simple_instr ::= while_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_instr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // simple_instr ::= BEGIN instr END 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		InstructionList si = (InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new BeginEndInstruction(si); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_instr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // simple_instr ::= output_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_instr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // simple_instr ::= input_stat 
            {
              SimpleInstruction RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = si; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_instr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // simple_instr ::= EXIT 
            {
              SimpleInstruction RESULT =null;
		 RESULT = new ExitInstruction(); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("simple_instr",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // instr ::= instr simple_instr SEMI 
            {
              InstructionList RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 i.add(si); RESULT = i; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // instr ::= simple_instr SEMI 
            {
              InstructionList RESULT =null;
		int sileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int siright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		SimpleInstruction si = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new InstructionList(si); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("instr",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // assign_stat ::= IDENT ASSIGN num_expr 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AssignInstruction(i,e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("assign_stat",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // if_stat ::= IF bool_expr THEN simple_instr 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleInstruction s = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new IfInstruction(c, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stat",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // if_stat ::= IF bool_expr THEN simple_instr ELSE simple_instr 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimpleInstruction s = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int s2left = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int s2right = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleInstruction s2 = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		  RESULT = new IfElseInstruction(c, s, s2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("if_stat",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // while_stat ::= WHILE bool_expr DO simple_instr 
            {
              SimpleInstruction RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		SimpleInstruction s = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new WhileInstruction(c, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stat",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // while_stat ::= DO simple_instr WHILE bool_expr 
            {
              SimpleInstruction RESULT =null;
		int sleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int sright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		SimpleInstruction s = (SimpleInstruction)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression c = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new DoWhileInstruction(c, s); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("while_stat",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // output_stat ::= PRINT num_expr 
            {
              SimpleInstruction RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Expression e = (Expression)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new OutputInstruction(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("output_stat",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // input_stat ::= READ IDENT 
            {
              SimpleInstruction RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String i = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new ReadInstruction(i); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("input_stat",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // program ::= instr 
            {
              Main RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		InstructionList i = (InstructionList)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		
            Main program = new Main(i);
            program.show();
          
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("program",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
